
[workspace]
resolver = "2"
members = [
    "modules/c-wrapper",
    "modules/core", 
    "modules/tokenizers",
    "modules/llms",
    "modules/wasm-linker",
]

[workspace.dependencies]
regex = "1.11.1"
ort = { version = "=2.0.0-rc.9", features = ["cuda", "ndarray"] }
ort-sys = { version = "=2.0.0-rc.9", default-features = false }
ndarray = "0.16.1"
once_cell = "1.18.0"
bytes = "1.10.1"
futures-util = "0.3.31"
futures-core = "0.3.31"
thiserror = "2.0.12"
onnx-embedding = "0.1.4"
serde = { version = "1.0", features = ["derive"] }
tempfile = "3.20.0"
zip = "4.1.0"
tokio = { version = "1.43.0", features = ["full"] }
uuid = { version = "1.11.1", features = ["v4"] }
hf-hub = { version = "0.4.1", features = ["tokio"] }
candle-core = "0.9.1"
candle-transformers = "0.9.1"
candle-nn = "0.9.1"
wasmtime = "34.0.1"
wasmtime-wasi = { version = "34.0.1", features = ["preview1"] }
bytemuck = "1.23.1"

# for the uploading of the surml file
hyper = { version = "0.14.27", features = ["full"] }
base64 = "0.13"

[workspace.lints.clippy]

# Checks for usage of `#[allow]` attribute and suggests replacing it with `#[expect]`.
# `#[expect]` attributes suppress the lint emission, but emit a warning if the expectation is unfulfilled.
# This is useful to be notified when the lint is no longer triggered.
# https://rust-lang.github.io/rust-clippy/master/#allow_attributes
allow_attributes = "warn"

# Checks for code like `foo = bar.clone();`.
# Custom `Clone::clone_from()` or `ToOwned::clone_into` implementations allow the objects to share resources and
# therefore avoid allocations.
# https://rust-lang.github.io/rust-clippy/master/#assigning_clones
assigning_clones = "warn"

# Checks for the usage of `as _` conversion using inferred type.
# https://rust-lang.github.io/rust-clippy/master/#cloned_instead_of_copied
cloned_instead_of_copied = "warn"

# Checks for function/method calls with a mutable parameter in `debug_assert!`, `debug_assert_eq!` and
# `debug_assert_ne!` macros.
# In release builds `debug_assert!` macros are optimized out by the compiler. Therefore mutating something in a
# `debug_assert!` macro results in different behavior between a release and debug build.
# https://rust-lang.github.io/rust-clippy/master/#debug_assert_with_mut_call
debug_assert_with_mut_call = "warn"

# Denies the configured methods and functions in `clippy.toml`.
# Some methods are undesirable in certain contexts, and it’s beneficial to lint for them as needed.
# https://rust-lang.github.io/rust-clippy/master/#disallowed_methods
disallowed_methods = "warn"

# Checks for impls of `From<..>` that contain `panic!()` or `unwrap()`
# TryFrom should be used if there’s a possibility of failure.
# https://rust-lang.github.io/rust-clippy/master/#fallible_impl_from
fallible_impl_from = "warn"

# Checks for usage of `.get().unwrap()` (or `.get_mut().unwrap()`) on a standard library type which implements Index.
# Using the Index trait ([]) is more clear and more concise.
# https://rust-lang.github.io/rust-clippy/master/#get_unwrap
get_unwrap = "warn"

# Checks for the usage of `_.to_owned()`, `vec.to_vec()`, or similar when calling `_.clone()` would be clearer.
# https://rust-lang.github.io/rust-clippy/master/#implicit_clone
implicit_clone = "warn"

# Checks for usage of `.to_string()` on an `&&T` where `T` implements `ToString` directly (like `&&str` or `&&String`).
# This bypasses the specialized implementation of ToString and instead goes through the more expensive string
# formatting facilities.
# https://rust-lang.github.io/rust-clippy/master/#inefficient_to_string
inefficient_to_string = "warn"

# Checks for whole number float literals that cannot be represented as the underlying type without loss.
# If the value was intended to be exact, it will not be. This may be especially surprising when the lost precision
# is to the left of the decimal point.
# https://rust-lang.github.io/rust-clippy/master/#lossy_float_literal
lossy_float_literal = "warn"

# Checks for functions that are declared `async` but have no `.await`s inside of them.
# Async functions with no async code create overhead, both mentally and computationally.
# https://rust-lang.github.io/rust-clippy/master/#unused_async
#
# SurrealDB relies on async functions in the AST parser and executor to avoid stack overflows.
# Warning or denying this lint can cause unexpected errors.
unused_async = "allow"
